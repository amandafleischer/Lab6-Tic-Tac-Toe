//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace FleischerFouts
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""GamePiece"",
            ""id"": ""981b9730-0737-4154-89a6-5c00bf9062ec"",
            ""actions"": [
                {
                    ""name"": ""MovePiece"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3e3ebacd-6578-491d-8051-3f5a8cbfba97"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""278927e3-ff1a-4ac0-a224-b256b4f21e75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlacePiece"",
                    ""type"": ""Button"",
                    ""id"": ""49e3465b-88ca-4cc4-bb31-d8145ce9c896"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""fb1b990a-d804-41f9-bd66-b0903330fcf5"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePiece"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""10631ce5-9c02-4d88-861b-6b2f2fc6f6f9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""54649f5e-16db-48b7-87d3-a61717a49248"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b4946df0-bd60-4720-bdc6-15b929561ae3"",
                    ""path"": ""*/{Menu}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cbcd005-d17a-4782-847f-246b2e1c0c15"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1868f254-c227-44e9-916f-804d2f7407d1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GamePiece
            m_GamePiece = asset.FindActionMap("GamePiece", throwIfNotFound: true);
            m_GamePiece_MovePiece = m_GamePiece.FindAction("MovePiece", throwIfNotFound: true);
            m_GamePiece_Quit = m_GamePiece.FindAction("Quit", throwIfNotFound: true);
            m_GamePiece_PlacePiece = m_GamePiece.FindAction("PlacePiece", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GamePiece
        private readonly InputActionMap m_GamePiece;
        private IGamePieceActions m_GamePieceActionsCallbackInterface;
        private readonly InputAction m_GamePiece_MovePiece;
        private readonly InputAction m_GamePiece_Quit;
        private readonly InputAction m_GamePiece_PlacePiece;
        public struct GamePieceActions
        {
            private @Controls m_Wrapper;
            public GamePieceActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MovePiece => m_Wrapper.m_GamePiece_MovePiece;
            public InputAction @Quit => m_Wrapper.m_GamePiece_Quit;
            public InputAction @PlacePiece => m_Wrapper.m_GamePiece_PlacePiece;
            public InputActionMap Get() { return m_Wrapper.m_GamePiece; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GamePieceActions set) { return set.Get(); }
            public void SetCallbacks(IGamePieceActions instance)
            {
                if (m_Wrapper.m_GamePieceActionsCallbackInterface != null)
                {
                    @MovePiece.started -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnMovePiece;
                    @MovePiece.performed -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnMovePiece;
                    @MovePiece.canceled -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnMovePiece;
                    @Quit.started -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnQuit;
                    @Quit.performed -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnQuit;
                    @Quit.canceled -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnQuit;
                    @PlacePiece.started -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnPlacePiece;
                    @PlacePiece.performed -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnPlacePiece;
                    @PlacePiece.canceled -= m_Wrapper.m_GamePieceActionsCallbackInterface.OnPlacePiece;
                }
                m_Wrapper.m_GamePieceActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MovePiece.started += instance.OnMovePiece;
                    @MovePiece.performed += instance.OnMovePiece;
                    @MovePiece.canceled += instance.OnMovePiece;
                    @Quit.started += instance.OnQuit;
                    @Quit.performed += instance.OnQuit;
                    @Quit.canceled += instance.OnQuit;
                    @PlacePiece.started += instance.OnPlacePiece;
                    @PlacePiece.performed += instance.OnPlacePiece;
                    @PlacePiece.canceled += instance.OnPlacePiece;
                }
            }
        }
        public GamePieceActions @GamePiece => new GamePieceActions(this);
        public interface IGamePieceActions
        {
            void OnMovePiece(InputAction.CallbackContext context);
            void OnQuit(InputAction.CallbackContext context);
            void OnPlacePiece(InputAction.CallbackContext context);
        }
    }
}
